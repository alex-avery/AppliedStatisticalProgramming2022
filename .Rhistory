knitr::opts_chunk$set(echo = TRUE)
pnorm(3.8156) / 2 #we divide by two to give us only values greater than 1.5.
knitr::opts_chunk$set(echo = TRUE)
pnorm(1.90) / 2 #we divide by two to give us only values greater than 1.5.
sqrt(25)
?matrix()
?replicate()
?apply()
sd(4)
x <- c(5,4,6,7,8)
sd(x)
?matrix()
?sapply()
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Applied Statistical Programming")
library(devtools)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Applied Statistical Programming/AppliedStatisticalProgramming2022")
getwd()
create_package("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Applied Statistical Programming/AppliedStatisticalProgramming2022/easyPois")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
#load data
load("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/QPM 1/cces2010sub.RData")
#creating polknowl variable
#0 = no correct answers, 5 = all correct answers
cces2010sub$polknow <- cces2010sub$polknow1 +
cces2010sub$polknow2 +
cces2010sub$polknow3 +
cces2010sub$polknow4 +
cces2010sub$polknow5
#create overreporting variable
cces2010sub$overreport <- NA
cces2010sub <- cces2010sub %>%
mutate(overreport = replace(overreport, (voted10unv == 1 & voted == 0), 1)) %>%
mutate(overreport = replace(overreport, (voted10unv == 0 & voted == 0), 0)) %>%
mutate(overreport = replace(overreport,
(income == "Skipped" |
income == "Not Asked" |
income == "Prefer not to say"),
NA))
dim(cces210sub)
dim(cces2010sub)
nrow(cces2010sub)
#removing NA values
library(naniar)
#removing NA values
cces2010sub_narm <- na.omit(cces2010sub)
nrow(cces2010sub_narm)
#create birth year squared variable
cces2010sub_narm$birthyrsq <- cces2010sub_narm$birthyr ^ 2
#running OLS
overreport_lm <- lm(overreport ~ black + hisp + asian + other + mixed + male +
educ + income + birthyr + birthyrsq + polknow +
rep + ind + ideo7ltc + attmeeting,
data = cces2010sub_narm
)
#running second OLS model with religion variables
overreport_religion_lm <- lm(overreport ~ black + hisp + asian + other + mixed +
male + educ + income + birthyr +
birthyrsq + polknow + rep + ind +
ideo7ltc + attmeeting + chatthtl +
catholic + prot + bornagain,
data = cces2010sub_narm
)
logLik <- function(y, lambda){
#getting the number of observations
n <- length(y)
#first summation
factsum <- sum(log(factorial(y)))
#second summation
lambdasum <- log(lambda) * sum(y)
#loglikelihood function
LL <- - (n * lambda) - factsum - lambdasum
return(LL)
}
logLik(c(1,2,3,4), lambda = 2)
#calculating out-of-sample mean squared errors for first OLS model
resid_Nfold <- NULL
#calculating out-of-sample mean squared errors for first OLS model
resid_Nfold <- NULL
for (i in 1:nrow(cces2010sub_narm)){
# subset into training and test data
test <- cces2010sub_narm[i, ]
training <- cces2010sub_narm[-i, ]
# fit model with training set
overreport_lm <- lm(overreport ~ black + hisp + asian + other + mixed + male +
educ + income + birthyr + birthyrsq + polknow +
rep + ind + ideo7ltc + attmeeting,
data = cces2010sub_narm
)
# predict with test set
fitted <- predict(overreport_lm, test)
# calculate residual
resid_Nfold <- c(resid_Nfold, test$overreport - fitted4)
}
#calculating out-of-sample mean squared errors for first OLS model
resid_Nfold <- NULL
for (i in 1:nrow(cces2010sub_narm)){
# subset into training and test data
test <- cces2010sub_narm[i, ]
training <- cces2010sub_narm[-i, ]
# fit model with training set
overreport_lm <- lm(overreport ~ black + hisp + asian + other + mixed + male +
educ + income + birthyr + birthyrsq + polknow +
rep + ind + ideo7ltc + attmeeting,
data = cces2010sub_narm
)
# predict with test set
fitted <- predict(overreport_lm, test)
# calculate residual
resid_Nfold <- c(resid_Nfold, test$overreport - fitted)
}
#set seed for replicability
set.seed(240)
#using K=10
folds <- sample(10, nrow(cces2010sub_narm), replace = TRUE)
# separate training and test set
# using first fold as test set
training <- cces2010sub_narm[folds != 1, ]
test <- cces2010sub_narm[folds == 1, ]
# create a vector to store the residuals from each iteration
resid_Kfold <- NULL
resid_Kfold <- c()
#set seed for replicability
set.seed(240)
#using K=10
folds <- sample(10, nrow(cces2010sub_narm), replace = TRUE)
# create a vector to store the residuals from each iteration
resid_Kfold <- NULL
resid_Kfold <- c()
for (i in 1:10){
#for each iteration separate training and test set
training <- cces2010sub_narm[folds != i, ]
test <- cces2010sub_narm[folds == i, ]
# fit a linear model using training set
model <- lm(overreport ~ black + hisp + asian + other + mixed + male +
educ + income + birthyr + birthyrsq + polknow +
rep + ind + ideo7ltc + attmeeting,
data = training
)
# find fitted values with test data
test.fitted <- predict(model, test)
# calculate residuals
# add it to the vector in the global environment
resid_Kfold <- c(resid_Kfold, test$Fertility - test.fitted)
}
# calculate MSE
mean(resid_KfoldË†2)
# calculate MSE
mean(resid_Kfold ^ 2)
#set seed for replicability
set.seed(240)
#using K=10
folds <- sample(10, nrow(cces2010sub_narm), replace = TRUE)
# create a vector to store the residuals from each iteration
resid_Kfold <- NULL
resid_Kfold <- c()
for (i in 1:10){
#for each iteration separate training and test set
training <- folds[folds != i, ]
test <- folds[folds == i, ]
# fit a linear model using training set
model <- lm(overreport ~ black + hisp + asian + other + mixed + male +
educ + income + birthyr + birthyrsq + polknow +
rep + ind + ideo7ltc + attmeeting,
data = training
)
# find fitted values with test data
test.fitted <- predict(model, test)
# calculate residuals
# add it to the vector in the global environment
resid_Kfold <- c(resid_Kfold, test$Fertility - test.fitted)
}
#using K=10
folds <- sample(10, nrow(cces2010sub_narm), replace = TRUE)
roxygen2::update_collate('.')
?update_collate()
update_collate()
getwd()
roxygen2::update_collate("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Applied Statistical Programming/AppliedStatisticalProgramming2022/easyPois")
roxygen2::update_collate("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Applied Statistical Programming/AppliedStatisticalProgramming2022/easyPois.Rproj")
load_all()
check()
library(easyPois)
y <- (1:10)
estimatePois(y=y, SEtype = "basic", B = 0)
estimatePois(y=y, SEtype = "bootstrap", B =10 )
estimatePois(y=y, SEtype = "bootstrap ", B = 40)
estimatePois(y=y, SEtype = "bootstrap ", B =40)
estimatePois(y = y, SEtype = "bootstrap, B = 10")
estimatePois(y=y, SEtype = "bootstrap", B =10 )
estimatePois(y=y, SEtype = "bootstrap", B = 40)
