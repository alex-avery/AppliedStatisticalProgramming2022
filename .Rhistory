arrange(c(country, paid, year))
wdi_controls <- wdi_controls %>%
sort("country", "paid", "year") %>%
arrange("country", "paid", "year")
wdi_controls <- wdi_controls %>%
sort(c("country", "paid", "year")) %>%
arrange("country", "paid", "year")
wdi_controls <- wdi_controls %>%
sort(partial = c("country", "paid", "year")) %>%
arrange("country", "paid", "year")
wdi_controls <- wdi_controls %>%
arrange("country", "paid", "year")
View(wdi_controls)
?order()
wdi_controls <- wdi_controls %>%
arrange("country", "paid", "year") %>%
order("country", "paid", "year")
dim(wdi_controls)
wdi_controls <- wdi_controls %>%
arrange("country", "paid", "year") %>%
rearrange("country", "paid", "year")
wdi_controls <- wdi_controls %>%
arrange("country", "paid", "year") %>%
relocate("country", "paid", "year")
pa_year <- pa_year %>%
arrange("country", "paid", "year") %>%
relocate("country", "paid", "year")
View(pa_year)
pa_year <- pa_year %>%
arrange("country", "paid", "year") %>%
relocate("country", "paid", "year")
?arrange()
pa_year <- pa_year %>%
arrange("country", "paid", "year", .by_group = TRUE) %>%
relocate("country", "paid", "year")
pa_year <- pa_year %>%
distinct(country, paid)
length(unique(women_and_peace_agreements$paid))
pa_year <- women_and_peace_agreements %>%
select(country_name, pa_year, pa_name, paid) %>%
rename(country = country_name) %>%
rename(year = pa_year) %>%
distinct(country, paid, .keep_all = TRUE)
pa_year$year <- (pa_year$year) - 1
pa_year$country[pa_year$country == "Zimbabwe (Rhodesia)"] <- "Zimbabwe"
pa_year$country[pa_year$country == "Iran (Persia)"] <- "Iran"
pa_year$country[pa_year$country == "Cambodia (Kampuchea)" ] <- "Cambodia"
pa_year$country[pa_year$country == "Myanmar (Burma)"  ] <- "Myanmar"
pa_year$country[pa_year$country == "Congo, Democratic Republic of (Zaire)" ] <- "Congo, Dem. Rep."
pa_year$country[pa_year$country == "Yemen (Arab Republic of Yemen)" ] <- "Yemen"
pa_year$country[pa_year$country == "Macedonia (Former Yugoslav Republic of)" ] <- "Macedonia"
wdi_controls <- WDI(
country = c("ZW",
"IR",
"PH",
"ZA",
"TD",
"MR",
"YE",
"NG",
"MZ",
"CO",
"UG",
"SD",
"IN",
"NI",
"AO",
"LR",
"GT",
"SV",
"PG",
"ML",
"RS",
"KH",
"RW",
"AF",
"GE",
"NE",
"SO",
"HT",
"IL",
"BA",
"DJ",
"HR",
"TJ",
"MX",
"SL",
"BD",
"MD",
"GW",
"GB",
"EC",
"BI",
"CD",
"CG",
"ET",
"KM",
"MK",
"ID",
"CI",
"SN",
"CM",
"NPL",
"CF",
"MM",
"COM",
"UKR",
"SS"),
indicator = c("SG.GEN.PARL.ZS",
"SE.TER.ENRR.FE",
"NE.CON.GOVT.ZS",
"MS.MIL.XPND.GD.ZS",
"SP.DYN.TFRT.IN",
"SH.STA.SMSS.ZS"
),
start = 1990,
end = 2017,
extra = FALSE,
cache = NULL,
latest = NULL,
language = "en"
)
wdi_controls <- WDI(
country = c("ZW",
"IR",
"PH",
"ZA",
"TD",
"MR",
"YE",
"NG",
"MZ",
"CO",
"UG",
"SD",
"IN",
"NI",
"AO",
"LR",
"GT",
"SV",
"PG",
"ML",
"RS",
"KH",
"RW",
"AF",
"GE",
"NE",
"SO",
"HT",
"IL",
"BA",
"DJ",
"HR",
"TJ",
"MX",
"SL",
"BD",
"MD",
"GW",
"GB",
"EC",
"BI",
"CD",
"CG",
"ET",
"KM",
"MK",
"ID",
"CI",
"SN",
"CM",
"NPL",
"CF",
"MM",
"COM",
"UKR",
"SS"),
indicator = c("SG.GEN.PARL.ZS",
"SE.TER.ENRR.FE",
"NE.CON.GOVT.ZS",
"MS.MIL.XPND.GD.ZS",
"SP.DYN.TFRT.IN",
"SH.STA.SMSS.ZS"
),
start = 1974,
end = 2017,
extra = FALSE,
cache = NULL,
latest = NULL,
language = "en"
)
pa_year <- women_and_peace_agreements %>%
select(country_name, pa_year, pa_name, paid) %>%
rename(country = country_name) %>%
rename(year = pa_year) %>%
distinct(country, paid, .keep_all = TRUE)
pa_year$year <- (pa_year$year) - 1
pa_year$country[pa_year$country == "Zimbabwe (Rhodesia)"] <- "Zimbabwe"
pa_year$country[pa_year$country == "Iran (Persia)"] <- "Iran"
pa_year$country[pa_year$country == "Cambodia (Kampuchea)" ] <- "Cambodia"
pa_year$country[pa_year$country == "Myanmar (Burma)"  ] <- "Myanmar"
pa_year$country[pa_year$country == "Congo, Democratic Republic of (Zaire)" ] <- "Congo, Dem. Rep."
pa_year$country[pa_year$country == "Yemen (Arab Republic of Yemen)" ] <- "Yemen"
pa_year$country[pa_year$country == "Macedonia (Former Yugoslav Republic of)" ] <- "Macedonia"
wdi_controls$country[wdi_controls$country == "Yemen, Rep."] <- "Yemen"
wdi_controls$country[wdi_controls$country == "Iran, Islamic Rep."] <- "Iran"
wdi_controls$country[wdi_controls$country == "Bosnia and Herzegovina"] <- "Bosnia-Herzegovina"
wdi_controls$country[wdi_controls$country == "Congo, Rep."] <- "Congo"
wdi_controls$country[wdi_controls$country == "North Macedonia"] <- "Macedonia"
wdi_controls$country[wdi_controls$country == "Serbia"] <- "Yugoslavia"
wdi_controls$country[wdi_controls$country == "Cote d'Ivoire"] <- "Cote D'Ivoire"
wdi_controls <- left_join(wdi_controls, pa_year, by = c("country", "year"))
wdi_controls <- wdi_controls %>%
drop_na(paid)
wdi_controls <- wdi_controls %>%
distinct(country, year, paid, .keep_all = TRUE)
wdi_controls <- wdi_controls %>%
arrange("country", "paid", "year") %>%
relocate("country", "paid", "year")
View(wdi_controls)
install.packages("glmnet")
#install.packages("glmnet")
library(glmnet)
library(ggplot2)
df <- swiss
install.packages("vdemdata")
R.version()
R.version
library(devtools)
devtools::install_github("vdeminstitute/vdemdata")
?vdemdata()
vdem <- vdem
vdem
?vdem
library(vdemdata)
vdeminstitute/vdemdata
vdem <- devtools::install_github("vdeminstitute/vdemdata")
vdem <- "vdeminstitute/vdemdata"
getwd()
vdem <- readRDS("V-Dem-CY-Full+Others-v12.rds")
# now, install the vdemdata package directly from GitHub
devtools::install_github("vdeminstitute/vdemdata")
?vdemdata
vdem <- vdemdata::vdem
vdemdata::fill_vars("women")
vdemdata::find_var("women")
vdemdata::find_var("women civil society participation")
View(vdem)
vdem_codebook <- vdem_codebook
?vdem_codebook
vdem_codebook <- vdemdata::codebook
View(vdem_codebook)
vdem_controls <- vdem %>%
select(country_name, year, v2x\_gencs, v2x\_gender)
vdem_controls <- vdem %>%
select(country_name, year, v2x_gencs, v2x_gender)
View(vdem_controls)
View(wdi_controls)
vdem_controls <- vdem_controls[vdem_controls$year >= 1974,]
View(vdem_controls)
vdem_controls <- vdem_controls[vdem_controls$year <= 2017,]
unique(vdem_controls$country_name)
vdem_controls <- vdem %>%
select(country_name, year, v2x_gencs, v2x_gender) %>%
rename(country = country_name) %>%
rename(women_civil_par = v2x_gencs) %>%
rename(women_pol_par = v2x_gender)
vdem_controls <- vdem_controls[vdem_controls$year >= 1974,]
vdem_controls <- vdem_controls[vdem_controls$year <= 2017,]
controls <- left_join(wdi_controls, vdem_controls, by = c("country", "year"))
View(controls)
controls <- controls %>%
select(-(isoc2c))
controls <- controls %>%
select(-(iso2c))
View(controls)
colnames(controls)
controls <- controls %>%
rename(prop_women_par = SG.GEN.PARL.ZS) %>%
rename(women_school_enroll = SE.TER.ENRR.FE) %>%
rename(gov_consump = NE.CON.GOVT.ZS) %>%
rename(mil_exp = MS.MIL.XPND.GD.ZS) %>%
rename(fertility = SP.DYN.TFRT.IN) %>%
rename(sanitation = SH.STA.SMSS.ZS)
controls <- controls %>%
relocate(pa_name, paid, country, year)
getwd()
nap <- read.csv("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Political Violence/Research Project/Data/NAP from True and Moralses.csv")
nap <- nap %>%
rename(pa_name = Peace_agreement) %>%
rename(year = Year) %>%
rename(country = Country)
controls <- left_join(controls, nap, by = "pa_name", "country", "year")
controls <- left_join(controls, nap, by = c("pa_name", "country", "year"))
View(controls)
table(controls$NAP)
View(nap)
library(devtools)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Applied Statistical Programming/AppliedStatisticalProgramming2022")
library(devtools)
create_package("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Applied Statistical Programming/AppliedStatisticalProgramming2022/integrateIt")
#ucdp_pa includes both dependent variables: gender provisions and female signatories
ucdp_pa <- read.csv("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Political Violence/Research Project/Data/ucdp_pa_female_sig.csv")
#selecting relevant columns to keep
ucdp_pa <- ucdp_pa %>%
select(c(pa_name, fem_sig, gender, pa_sign, paid, conflict_id, dyad_id, actor_id, pa.type))
#ucdp_pa includes both dependent variables: gender provisions and female signatories
ucdp_pa <- read.csv("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Political Violence/Research Project/Data/ucdp_pa_female_sig.csv")
#oa_dv includes ucdp peace agreements data and the completed female signers variable
pa_dv <- read.csv("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Political Violence/Research Project/Data/ucdp_pa_female_sig.csv")
#pa_dv includes ucdp peace agreements data and the completed female signers variable
pa_dv <- read.csv("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Political Violence/Research Project/Data/ucdp_pa_female_sig.csv")
#select relevant variables from pa_dv
pa_dv <- pa_dv %>%
select(c(pa_name, fem_sig, gender, pa_sign, paid, conflict_id, dyad_id, actor_id, year.x)) %>%
relocate(paid, pa_name, year.x, conflict_id, dyad_id, actor_id)
#pa_dv includes ucdp peace agreements data and the completed female signers variable
pa_dv <- read.csv("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Political Violence/Research Project/Data/ucdp_pa_female_sig.csv")
#select relevant variables from pa_dv
pa_dv <- pa_dv %>%
select(c(pa_name, fem_sig, gender, pa_sign, paid, conflict_id, dyad_id, actor_id, year.x)) %>%
relocate(paid, pa_name, year.x, conflict_id, dyad_id, actor_id) %>%
rename(year = year.x)
#separating each dyad into its own column
pa_dv <- separate_rows(pa_dv, dyad_id, sep = ", ", convert = FALSE)
#changing variables to numeric
pa_dv$dyad_id <- as.numeric(pa_dv$dyad_id)
pa_dv$conflict_id <- as.numeric(pa_dv$conflict_id)
pa_dv$year <- as.numeric(pa_dv$year)
#WARD data
ward <- read.csv("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Political Violence/Research Project/Data/ward_original.csv")
#SVAC data
svac <- read.csv("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Political Violence/Research Project/Data/SVAC_3.0_conflictyears.csv")
#remvoing NA observations
svac_rm <- svac[!(svac$state_prev == -99 | svac$ai_prev == -99 | svac$hrw_prev == -99),]
#getting means for each conflict
#I do not distinguish between actors
svac_means <- svac_rm %>%
group_by(conflictid) %>%
summarize(
state_mean = mean(state_prev),
ai_mean = mean(ai_prev),
hrw_mean = mean(hrw_prev),
across()
)
#keeping one observation per conflict
svac_means <- svac_means %>% distinct(conflictid, .keep_all = TRUE)
#rename variable for consistency
svac_means <- rename(svac_means, conflict_id = conflictid)
#save data
save(svac_means, file = "svac_means.Rdata")
rm(svac)
rm(svac_rm)
#rename variable for merging
#merging based on rebel group id
ward <- rename(ward, actor_id = sidebid)
#keep relevant variables
svac_means <- svac_means %>%
select(conflict_id, state_mean, ai_mean, hrw_mean)
#save data
save(svac_means, file = "svac_means.Rdata")
svac_means$conflict_id <- as.numeric(svac_means$conflict_id)
#save data
save(svac_means, file = "svac_means.Rdata")
#merging pa_dv and svac by conflict
df <- left_join(pa_dv, svac_means, by = "conflict_id")
#separating actors for each peace agreement
df <- separate_rows(df, actor_id, sep = ", ", convert = FALSE)
df$actor_id <- as.numeric(df$actor_id)
ward <- ward %>%
select(c(sideb, actor_id, female_combatants_best, cat4_prevalence_best))
#merging df and ward by rebel group
df2 <- left_join(df, ward, by = "actor_id")
#taking the highest level of female combatants for each peace agreement
df3 <- df2 %>%
group_by(pa_name) %>%
summarise(
cat4_prevalence_best = max(cat4_prevalence_best, na.rm = TRUE),
across()
)
#keeping one observation per peace agreement
df3 <- distinct(df3, pa_name, cat4_prevalence_best, .keep_all = TRUE)
#rearranging variables
df3 <- relocate(df3, paid, pa_name, year, conflict_id, dyad_id)
setGeneric(
name = "integrateIt",
def = function(x, y, a, b, rule){
standardGeneric("integrateIt")
}
)
setClass(
Class = "Trapezoid",
representation = representation(
x = "numeric",
y = "numeric",
a = "numeric",
b = "numeric",
n = "numeric")
prototype = prototype(
x = NA_real_
y = NA_real_
a = NA_real_
b = NA_real_
n = NA_real_
)
setClass(
Class = "Trapezoid",
representation = representation(
x = "numeric",
y = "numeric",
a = "numeric",
b = "numeric",
n = "numeric"
)
prototype = prototype(
x = NA_real_
y = NA_real_
a = NA_real_
b = NA_real_
n = NA_real_
)
setClass(
Class = "Trapezoid",
representation = representation(
x = "numeric",
y = "numeric",
a = "numeric",
b = "numeric",
n = "numeric"
),
prototype = prototype(
x = NA_real_
y = NA_real_
a = NA_real_
b = NA_real_
n = NA_real_
)
setClass(
Class = "Trapezoid",
representation = representation(
x = "numeric",
y = "numeric",
a = "numeric",
b = "numeric",
n = "numeric"
),
prototype = prototype(
x = NA_real_
y = NA_real_
a = NA_real_
b = NA_real_
n = NA_real_
)
setClass(
Class = "Trapezoid",
representation = representation(
x = "numeric",
y = "numeric",
a = "numeric",
b = "numeric",
n = "numeric"
),
prototype = prototype(
x = NA_real_
y = NA_real_
a = NA_real_
b = NA_real_
n = NA_real_
)
setClass(
Class = "Trapezoid",
representation = representation(
x = "numeric",
y = "numeric",
a = "numeric",
b = "numeric",
n = "numeric"
),
prototype = prototype(
x = NA_real_,
y = NA_real_,
a = NA_real_,
b = NA_real_,
n = NA_real_
)
setValidity("Trapezoid", function(object){
#test that x and y are the same length
test_xy_length <- length(object@x) == length(object@y)
#test that n is equal to the length of vector x
test_n_length <- n == length(object@x)
#test that a and b are in vector x
test_ab <- (object@a %in% object@x) & (object@b %in% object@x)
if(!test_xy_length){
stop("The vectors x and y are not of the same length.")}
if(!test_n_length){
stop("n is not the correct length.")}
if(!test_ab){
stop("a and/or b is not contained in x.")
}
)
setMethod(
"initialize",
"Trapezoid",
function(.Object, ...){
value = callNextMethod()
validObject(value)
return(value)
}
)
getwd()
