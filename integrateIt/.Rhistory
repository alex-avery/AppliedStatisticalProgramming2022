use_git()
use_r(TrapezoidClass.R)
getwd()
use_r("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Applied Statistical Programming/AppliedStatisticalProgramming2022/integrateIt/R/TrapezoidClass.R")
use_r("/Users/alexcisco/TrapezoidClass.R")
use_r(TrapezoidClass)
?use_r()
use_r(TrapezoidClass.R)
use_r("TrapezoidClass")
load_all()
use_r("SimpsonClass")
?seq_len()
seq(5)
seq_len(1,5)
seq(1, 5, length.out = n)
setGeneric(
name = "integrateIt",
def = function(x, y, a, b, n, rule){
standardGeneric("integrateIt")
}
)
setMethod(
"integrateIt",
def = function(x, y, a, b, n, rule){
interval = seq_len
}
)
seq(1, 5, length.out = n)
setMethod(
"integrateIt",
def = function(x, y, a, b, n, rule){
interval <- seq(a, b, length.out = n)
}
)
setMethod(
"integrateIt",
def = function(fun, a, b, n, rule){
#create interval for integration
interval <- seq(a, b, length.out = n)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (fun(interval[1]) + 2(sum(fun(interval[2:n-1]))) + fun(interval[n]))
}
)
i <- 2
foo <- 1:30
foo[2:(i+2)]
foo[2:(i+2) == (i+2)]
foo[i:(i+2) == (i+2)]
foo[1:(i+2) == (i+2)]
foo[2:(i+1) == (i+1)]
foo[2:(i+2) == (i+2)]
foo[2:(i+2) > n]
?seq()
#' Trapezoid Class
#'
#' @slot x a vector of numeric values.
#' @slot y a vector of numeric values.
#' @slot a a numeric value contained in x (start of integration).
#' @slot b a numeric value contained in x (end of integration).
#' @slot n a numeric value the length of vector x.
#'
#' @export
setClass(
Class = "Trapezoid",
representation = representation(
fun = "function",
x = "numeric",
y = "numeric",
a = "numeric",
b = "numeric",
n = "numeric"
),
prototype = prototype(
x = NA_real_,
y = NA_real_,
a = NA_real_,
b = NA_real_,
n = NA_real_
)
setValidity(
"Trapezoid",
function(object){
#test that x and y are the same length
test_xy_length <- length(object@x) == length(object@y)
#test that n is equal to the length of vector x
test_n_length <- n == length(object@x)
#test that a and b are in vector x
test_ab <- (object@a %in% object@x) & (object@b %in% object@x)
if(!test_xy_length){
stop("The vectors x and y are not of the same length.")}
if(!test_n_length){
stop("n is not the correct length.")}
if(!test_ab){
stop("a and/or b is not contained in x.")
}
)
#' @export
setMethod(
"initialize",
"Trapezoid",
function(.Object, ...){
value = callNextMethod()
validObject(value)
return(value)
}
)
#' Simpson Class
#'
#' @slot x a vector of numeric values.
#' @slot y a vector of numeric values..
#' @slot a a numeric value contained in x (start of integration).
#' @slot b a numeric value contained in x (end of integration).
#' @slot n a numeric value the length of vector x.
#'
#' @export
setClass(
Class = "Simpson",
representation = representation(
fun = "function",
x = "numeric",
y = "numeric",
a = "numeric",
b = "numeric",
n = "numeric"
),
prototype = prototype(
x = NA_real_,
y = NA_real_,
a = NA_real_,
b = NA_real_,
n = NA_real_
)
setValidity(
"Simpson",
function(object){
#test that x and y are the same length
test_xy_length <- length(object@x) == length(object@y)
#test that n is equal to the length of vector x
test_n_length <- n == length(object@x)
#test that a and b are in vector x
test_ab <- (object@a %in% object@x) & (object@b %in% object@x)
if(!test_xy_length){
stop("The vectors x and y are not of the same length.")}
if(!test_n_length){
stop("n is not the correct length.")}
if(!test_ab){
stop("a and/or b is not contained in x.")
}
)
#' @export
setMethod(
"initialize",
"Simpson",
function(.Object, ...){
value = callNextMethod()
validObject(value)
return(value)
}
)
setGeneric(
name = "integrateIt",
def = function(fun, a, b, n, rule){
standardGeneric("integrateIt")
}
)
setMethod(
"integrateIt",
def = function(fun, a, b, n, rule){
#create interval for integration
interval <- seq(a, b, length.out = n)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (fun(interval[1]) + 2(sum(fun(interval[2:(n-1)]))) + fun(interval[n]))
}
if(rule == "Simpson" | rule == "simpson"){
#Simpson Rule
i <- 2
s_result <- (h / 3) * (fun(interval[1]) + 4(sum(fun(interval[seq(from = 2, to = n, by = 2)]))) + 2(sum(fun(interval[from = 3, to = n, by = 2]))) + fun(interval[n]))
}
else{
stop("Please use either Trapezoid or Simpson rule.")
}
)
test <- integrateIt(fun = (x^2), a = 1, b = 80, n = 40, rule = "Trapezoid")
setMethod(
"integrateIt",
def = function(fun, a, b, n, rule){
#create interval for integration
interval <- seq(from = a, to = b, length.out = n)
#get y vector
y <- fun(x)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (y[1] + 2(sum(y[2:(n-1)])) + y[n])
}
if(rule == "Simpson" | rule == "simpson"){
#Simpson Rule
i <- 2
s_result <- (h / 3) * (y[1] + 4(sum(y[seq(from = 2, to = n, by = 2)])) + 2(sum(y[seq(from = 3, to = n, by = 2)])) + y[n])
}
else{
stop("Please use either Trapezoid or Simpson rule.")
}
)
test <- integrateIt(fun = (x^2), a = 1, b = 80, n = 40, rule = "Trapezoid")
test <- integrateIt(fun = (x^2), x = (1:80), a = 1, b = 80, n = 40, rule = "Trapezoid")
setMethod(
"integrateIt",
def = function(fun, x, a, b, n, rule){
#get y vector
y <- fun(x)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (y[1] + 2(sum(y[2:(n-1)])) + y[n])
}
if(rule == "Simpson" | rule == "simpson"){
#Simpson Rule
i <- 2
s_result <- (h / 3) * (y[1] + 4(sum(y[seq(from = 2, to = n, by = 2)])) + 2(sum(y[seq(from = 3, to = n, by = 2)])) + y[n])
}
else{
stop("Please use either Trapezoid or Simpson rule.")
}
)
setGeneric(
name = "integrateIt",
def = function(fun, x, a, b, n, rule){
standardGeneric("integrateIt")
}
)
setMethod(
"integrateIt",
def = function(fun, x, a, b, n, rule){
#get y vector
y <- fun(x)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (y[1] + 2(sum(y[2:(n-1)])) + y[n])
}
if(rule == "Simpson" | rule == "simpson"){
#Simpson Rule
i <- 2
s_result <- (h / 3) * (y[1] + 4(sum(y[seq(from = 2, to = n, by = 2)])) + 2(sum(y[seq(from = 3, to = n, by = 2)])) + y[n])
}
else{
stop("Please use either Trapezoid or Simpson rule.")
}
)
test <- integrateIt(fun = (x^2), x = (1:80), a = 1, b = 80, n = 40, rule = "Trapezoid")
setMethod(
"integrateIt",
def = function(fun, x, a, b, n, rule){
#get y vector
y <- sapply(x, fun)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (y[1] + 2(sum(y[2:(n-1)])) + y[n])
}
if(rule == "Simpson" | rule == "simpson"){
#Simpson Rule
i <- 2
s_result <- (h / 3) * (y[1] + 4(sum(y[seq(from = 2, to = n, by = 2)])) + 2(sum(y[seq(from = 3, to = n, by = 2)])) + y[n])
}
else{
stop("Please use either Trapezoid or Simpson rule.")
}
)
test <- integrateIt(fun = (x^2), x = (1:80), a = 1, b = 80, n = 40, rule = "Trapezoid")
n <- 1:30
n[seq(from = 2, to = (n-1), by = 2)]
x <- 1:30
n <- length(x)
x[seq(from = 2, to = n, by = 2)]
x[seq(from = 2, to = (n-1), by = 2)]
x <- 1:31
n <- length(x)
x[seq(from = 2, to = (n-1), by = 2)]
x[seq(from = 3, to = (n-1), by = 2)]
x <- 1:30
n <- length(x)
x[seq(from = 3, to = (n-1), by = 2)]
setMethod(
"integrateIt",
def = function(fun, x, a, b, rule){
#get x_values vector
x_values <- x[x >= a & x <= b]
#get y_values vector
y_values <- sapply(x_values, fun)
#get n value
n <- length(x_values)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (y_values[1] + 2(sum(y_values[2:(n - 1)])) + y_values[n])
}
if(rule == "Simpson" | rule == "simpson"){
#Simpson Rule
s_result <- (h / 3) * (y_values[1] + 4(sum(y_values[seq(from = 2, to = (n-1), by = 2)])) + 2(sum(y_values[seq(from= 3, to = (n-1), by = 2)])) + y_values[n])
}
else{
stop("Please use either Trapezoid or Simpson rule.")
}
)
load_all()
test <- integrateIt(fun = (x^2), x = (1:80), a = 1, b = 80, rule = Trapezoid)
x <- 1:80
test <- integrateIt(fun = (x^2), x = x, a = 1, b = 80, n = 40, rule = "Trapezoid")
test <- integrateIt(fun = (x^2), x = x, a = 1, b = 80, rule = "Trapezoid")
my_function <- function(x){}
my_function <- function(x){x ^ 2}
View(my_function)
test <- integrateIt(fun = my_function, x = x, a = 1, b = 80, rule = "Trapezoid")
test <- integrateIt(fun = my_function(x), x = x, a = 1, b = 80, rule = "Trapezoid")
setMethod(
"integrateIt",
def = function(fun, x, a, b, rule){
#get x_values vector
x_values <- x[x >= a & x <= b]
#get y_values vector
y_values <- sapply(x_values, fun)
#get n value
n <- length(x_values)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (y_values[1] + 2(sum(y_values[2:(n - 1)])) + y_values[n])
return(new(
"Trapezoid",
x = x_values,
y = y_values,
result = t_result)
)
}
if(rule == "Simpson" | rule == "simpson"){
#Simpson Rule
s_result <- (h / 3) * (y_values[1] + 4(sum(y_values[seq(from = 2, to = (n-1), by = 2)])) + 2(sum(y_values[seq(from= 3, to = (n-1), by = 2)])) + y_values[n])
}
return(new(
"Simpson",
x = x_values,
y = y_values,
result = s_result)
)
else{
stop("Please use either Trapezoid or Simpson rule.")
}
)
setMethod(
"integrateIt",
def = function(fun, x, a, b, rule){
#get x_values vector
x_values <- x[x >= a & x <= b]
#get y_values vector
y_values <- sapply(x_values, fun)
#get n value
n <- length(x_values)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (y_values[1] + 2(sum(y_values[2:(n - 1)])) + y_values[n])
return(new(
"Trapezoid",
x = x_values,
y = y_values,
result = t_result)
)
}
if(rule == "Simpson" | rule == "simpson"){
#Simpson Rule
s_result <- (h / 3) * (y_values[1] + 4(sum(y_values[seq(from = 2, to = (n-1), by = 2)])) + 2(sum(y_values[seq(from= 3, to = (n-1), by = 2)])) + y_values[n])
return(new(
"Simpson",
x = x_values,
y = y_values,
result = s_result)
)
}
else{
stop("Please use either Trapezoid or Simpson rule.")
}
)
test <- integrateIt(fun = (x^2), x = (1:80), a= 1, b = 80, rule = "Trapezoid")
test <- integrateIt(fun = my_function, x = x, a= 1, b = 80, rule = "Trapezoid")
setMethod(
"integrateIt",
def = function(fun, x, a, b, rule){
#get x_values vector
x_values <- x[x >= a & x <= b]
#get y_values vector
y_values <- sapply(x_values, fun)
#get n value
n <- length(x_values)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (y_values[1] + 2 * (sum(y_values[2:(n - 1)])) + y_values[n])
return(new(
"Trapezoid",
x = x_values,
y = y_values,
result = t_result)
)
}
if(rule == "Simpson" | rule == "simpson"){
#Simpson Rule
s_result <- (h / 3) * (y_values[1] + 4 * (sum(y_values[seq(from = 2, to = (n-1), by = 2)])) + 2 * (sum(y_values[seq(from= 3, to = (n-1), by = 2)])) + y_values[n])
return(new(
"Simpson",
x = x_values,
y = y_values,
result = s_result)
)
}
else{
stop("Please use either Trapezoid or Simpson rule.")
}
)
test <- integrateIt(fun = my_function, x = x, a= 1, b = 80, rule = "Trapezoid")
test <- integrateIt(fun = my_function, x = x, a= 1, b = 80, rule = Trapezoid)
test <- integrateIt(fun = my_function, x = x, a= 1, b = 80, rule = "Trapezoid")
setGeneric(
name = "integrateIt",
def = function(fun, x, a, b, rule){
standardGeneric("integrateIt")
}
)
setMethod(
"integrateIt",
def = function(fun, x, a, b, rule){
#get x_values vector
x_values <- x[x >= a & x <= b]
#get y_values vector
y_values <- sapply(x_values, fun)
#get n value
n <- length(x_values)
#create h
h <- (b - a) / n
if(rule == "Trapezoid" | rule == "trapezoid"){
#Trapezoidal Rule
t_result <- (h / 2) * (y_values[1] + 2 * (sum(y_values[2:(n - 1)])) + y_values[n])
return(new(
"Trapezoid",
x = x_values,
y = y_values,
result = t_result)
)
}
if(rule == "Simpson" | rule == "simpson"){
#Simpson Rule
s_result <- (h / 3) * (y_values[1] + 4 * (sum(y_values[seq(from = 2, to = (n-1), by = 2)])) + 2 * (sum(y_values[seq(from= 3, to = (n-1), by = 2)])) + y_values[n])
return(new(
"Simpson",
x = x_values,
y = y_values,
result = s_result)
)
}
else{
stop("Please use either Trapezoid or Simpson rule.")
}
)
test <- integrateIt(fun = my_function, x = x, a= 1, b = 80, rule = "Trapezoid")
load_all()
rm(list = c("integrateIt"))
load_all()
check()
warning()
notes()
load_all()
check()
use_mit_license()
test()
test_check("integrateIt")
library(testthat)
library(integrateIt)
test_check("integrateIt")
integrateIt(my_function, x, 1, 80, "Trapezoid")
check()
document()
?integrateIt()
use_package("methods")
check()
install()
load_all()
install(integrateIt)
install("/Users/alexcisco/Library/Mobile Documents/com~apple~CloudDocs/Documents/WUSTL/Courses/Applied Statistical Programming/AppliedStatisticalProgramming2022/integrateIt")
document()
library(devtools)x
library(devtools)
document()
check()
install()
library(integrateIt)
integrateIt(my_function, x, 1, 80, "Trapezoid")
integrateIt(my_function, x, 1, 80, "Simpson")
